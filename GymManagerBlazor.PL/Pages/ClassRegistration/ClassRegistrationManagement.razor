@page "/class-registrations"
@using GymManagerBlazor.BUS.Models
@using GymManagerBlazor.BUS.Services.Interface
@using GymManagerBlazor.PL.Pages.Member
@using MudBlazor
@inject IMemberService MemberService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Quản Lý Thành Viên</PageTitle>

<h3>Quản lý Thành Viên</h3>

<MudTable Items="members" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudButton Color="Color.Primary" OnClick="async () => await AddMember()" StartIcon="@Icons.Material.Filled.Add">
            Thêm Thành Viên
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Họ Tên</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Điện Thoại</MudTh>
        <MudTh>Loại Thẻ</MudTh>
        <MudTh>Ngày Tham Gia</MudTh>
        <MudTh>Thao Tác</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Họ Tên">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Điện Thoại">@context.Phone</MudTd>
        <MudTd DataLabel="Loại Thẻ">@context.MembershipType</MudTd>
        <MudTd DataLabel="Ngày Tham Gia">@context.JoinDate?.ToShortDateString()</MudTd>
        <MudTd DataLabel="Thao Tác">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" OnClick="async () => await EditMember(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="async () => await DeleteMember(context.Id)" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<MemberModel> members;

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        members = await MemberService.GetAllMembersAsync();
    }

    private async Task AddMember()
    {
        var dialog = DialogService.Show<MemberFormDialog>("Thêm Thành Viên Mới");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadMembers();
            Snackbar.Add("Đã thêm thành viên mới", Severity.Success);
        }
    }

    private async Task EditMember(MemberModel member)
    {
        var parameters = new DialogParameters { ["Member"] = member };
        var dialog = DialogService.Show<MemberFormDialog>("Sửa Thành Viên", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadMembers();
            Snackbar.Add("Đã cập nhật thông tin thành viên", Severity.Success);
        }
    }

    private async Task DeleteMember(int memberId)
    {
        bool? confirmed = await DialogService.ShowMessageBox("Xác nhận", "Bạn có chắc muốn xóa thành viên này?",
                                                             yesText: "Xóa", noText: "Hủy");
        if (confirmed == true)
        {
            await MemberService.DeleteMemberAsync(memberId);
            await LoadMembers();
            Snackbar.Add("Đã xóa thành viên", Severity.Success);
        }
    }
}
